"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/vite.ts
var vite_exports = {};
__export(vite_exports, {
  default: () => vite_default
});
module.exports = __toCommonJS(vite_exports);

// src/core/unplugin.ts
var import_unplugin = require("unplugin");

// src/core/constant.ts
var defaultOptions = {
  external: [],
  consoleType: ["log"],
  include: [/\.[jt]sx?$/, /\.vue\??/],
  exclude: [/node_modules/, /\.git/]
};

// src/core/unpluginContext.ts
var import_pluginutils = require("@rollup/pluginutils");
var import_magic_string = __toESM(require("magic-string"), 1);

// src/core/utils.ts
var import_node_path = __toESM(require("path"), 1);
var getAbsoluteFilePaths = (filePaths) => {
  return filePaths.map((filePath) => {
    return import_node_path.default.isAbsolute(filePath) ? filePath : import_node_path.default.resolve(process.cwd(), filePath);
  });
};

// src/core/unpluginContext.ts
var createUnpluginContext = (options = {}) => {
  const filter = (0, import_pluginutils.createFilter)(
    options.include || [/\.[jt]sx?$/, /\.vue$/, /\.vue\?vue/, /\.svelte$/],
    options.exclude || [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/]
  );
  const transform = (code, id) => {
    var _a;
    const s = new import_magic_string.default(code);
    if (options.external && getAbsoluteFilePaths(options.external).includes(id)) {
      return {
        code,
        map: null
      };
    }
    const reg = new RegExp(
      `(?<![=>|&|||?|:]\\s*)console\\.(${((_a = options.consoleType) == null ? void 0 : _a.join("|")) || "log"})\\s*\\([\\s\\S]*?\\)(?:\\s*;)?\\s*\\)?;?`,
      "g"
    );
    s.replace(reg, "");
    s.replace(/debugger;?/g, "");
    return {
      code: s.toString(),
      map: s.generateMap({ source: id, includeContent: true })
    };
  };
  return {
    filter,
    transform
  };
};

// src/core/unplugin.ts
var unplugin_default = (0, import_unplugin.createUnplugin)((options) => {
  const ctx = createUnpluginContext(options != null ? options : defaultOptions);
  return {
    name: "unplugin-remove-console-debugger",
    enforce: "post",
    apply: "build",
    transformInclude(id) {
      return ctx.filter(id);
    },
    transform(code, id) {
      return ctx.transform(code, id);
    }
  };
});

// src/vite.ts
var vite_default = unplugin_default.vite;
