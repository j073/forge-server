// src/core/unplugin.ts
import { createUnplugin } from "unplugin";

// src/core/constant.ts
var defaultOptions = {
  external: [],
  consoleType: ["log"],
  include: [/\.[jt]sx?$/, /\.vue\??/],
  exclude: [/node_modules/, /\.git/]
};

// src/core/unpluginContext.ts
import { createFilter } from "@rollup/pluginutils";
import MagicString from "magic-string";

// src/core/utils.ts
import path from "path";
var getAbsoluteFilePaths = (filePaths) => {
  return filePaths.map((filePath) => {
    return path.isAbsolute(filePath) ? filePath : path.resolve(process.cwd(), filePath);
  });
};

// src/core/unpluginContext.ts
var createUnpluginContext = (options = {}) => {
  const filter = createFilter(
    options.include || [/\.[jt]sx?$/, /\.vue$/, /\.vue\?vue/, /\.svelte$/],
    options.exclude || [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/]
  );
  const transform = (code, id) => {
    var _a;
    const s = new MagicString(code);
    if (options.external && getAbsoluteFilePaths(options.external).includes(id)) {
      return {
        code,
        map: null
      };
    }
    const reg = new RegExp(
      `(?<![=>|&|||?|:]\\s*)console\\.(${((_a = options.consoleType) == null ? void 0 : _a.join("|")) || "log"})\\s*\\([\\s\\S]*?\\)(?:\\s*;)?\\s*\\)?;?`,
      "g"
    );
    s.replace(reg, "");
    s.replace(/debugger;?/g, "");
    return {
      code: s.toString(),
      map: s.generateMap({ source: id, includeContent: true })
    };
  };
  return {
    filter,
    transform
  };
};

// src/core/unplugin.ts
var unplugin_default = createUnplugin((options) => {
  const ctx = createUnpluginContext(options != null ? options : defaultOptions);
  return {
    name: "unplugin-remove-console-debugger",
    enforce: "post",
    apply: "build",
    transformInclude(id) {
      return ctx.filter(id);
    },
    transform(code, id) {
      return ctx.transform(code, id);
    }
  };
});

export {
  unplugin_default
};
