import * as _nuxt_schema from '@nuxt/schema';
import { ModuleOptions as ModuleOptions$1 } from 'nuxt-csurf';
import { Options } from 'unplugin-remove/types';

type CrossOriginResourcePolicyValue = 'same-site' | 'same-origin' | 'cross-origin';
type CrossOriginOpenerPolicyValue = 'unsafe-none' | 'same-origin-allow-popups' | 'same-origin';
type CrossOriginEmbedderPolicyValue = 'unsafe-none' | 'require-corp' | 'credentialless';
type ReferrerPolicyValue = 'no-referrer' | 'no-referrer-when-downgrade' | 'origin' | 'origin-when-cross-origin' | 'same-origin' | 'strict-origin' | 'strict-origin-when-cross-origin' | 'unsafe-url';
type XContentTypeOptionsValue = 'nosniff';
type XDnsPrefetchControlValue = 'on' | 'off';
type XDownloadOptionsValue = 'noopen';
type XFrameOptionsValue = 'DENY' | 'SAMEORIGIN';
type XPermittedCrossDomainPoliciesValue = 'none' | 'master-only' | 'by-content-type' | 'by-ftp-filename' | 'all';
type CSPSourceValue = "'self'" | "'unsafe-eval'" | "'wasm-unsafe-eval'" | "'unsafe-hashes'" | "'unsafe-inline'" | "'none'" | "'strict-dynamic'" | "'report-sample'" | "'nonce=<base64-value>'" | string;
type CSPSandboxValue = 'allow-downloads' | 'allow-downloads-without-user-activation' | 'allow-forms' | 'allow-modals' | 'allow-orientation-lock' | 'allow-pointer-lock' | 'allow-popups' | 'allow-popups-to-escape-sandbox' | 'allow-presentation' | 'allow-same-origin' | 'allow-scripts' | 'allow-storage-access-by-user-activation' | 'allow-top-navigation' | 'allow-top-navigation-by-user-activation' | 'allow-top-navigation-to-custom-protocols';
type ContentSecurityPolicyValue = {
    'child-src'?: CSPSourceValue[] | string | false;
    'connect-src'?: CSPSourceValue[] | string | false;
    'default-src'?: CSPSourceValue[] | string | false;
    'font-src'?: CSPSourceValue[] | string | false;
    'frame-src'?: CSPSourceValue[] | string | false;
    'img-src'?: CSPSourceValue[] | string | false;
    'manifest-src'?: CSPSourceValue[] | string | false;
    'media-src'?: CSPSourceValue[] | string | false;
    'object-src'?: CSPSourceValue[] | string | false;
    'prefetch-src'?: CSPSourceValue[] | string | false;
    'script-src'?: CSPSourceValue[] | string | false;
    'script-src-elem'?: CSPSourceValue[] | string | false;
    'script-src-attr'?: CSPSourceValue[] | string | false;
    'style-src'?: CSPSourceValue[] | string | false;
    'style-src-elem'?: CSPSourceValue[] | string | false;
    'style-src-attr'?: CSPSourceValue[] | string | false;
    'worker-src'?: CSPSourceValue[] | string | false;
    'base-uri'?: CSPSourceValue[] | string | false;
    'sandbox'?: CSPSandboxValue[] | string | false;
    'form-action'?: CSPSourceValue[] | string | false;
    'frame-ancestors'?: ("'self'" | "'none'" | string)[] | string | false;
    'navigate-to'?: ("'self'" | "'none'" | "'unsafe-allow-redirects'" | string)[] | string | false;
    'report-uri'?: string[] | string | false;
    'report-to'?: string | false;
    'upgrade-insecure-requests'?: boolean;
};
type StrictTransportSecurityValue = {
    maxAge: number;
    includeSubdomains?: boolean;
    preload?: boolean;
};
type PermissionsPolicyValue = {
    'camera'?: string[] | string | false;
    'display-capture'?: string[] | string | false;
    'fullscreen'?: string[] | string | false;
    'geolocation'?: string[] | string | false;
    'microphone'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'accelerometer'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'ambient-light-sensor'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'autoplay'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'battery'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'document-domain'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'encrypted-media'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'execution-while-not-rendered'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'execution-while-out-of-viewport'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'gamepad'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'gyroscope'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'hid'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'idle-detection'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'local-fonts'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'magnetometer'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'midi'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'payment'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'picture-in-picture'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'publickey-credentials-get'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'screen-wake-lock'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'serial'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'speaker-selection'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'usb'?: string[] | string | false;
    'web-share'?: string[] | string | false;
    /**
     * ðŸ§ª Experimental. Expect browser behavior to change in the future.
     */
    'xr-spatial-tracking'?: string[] | string | false;
};
type OptionKey = 'contentSecurityPolicy' | 'crossOriginEmbedderPolicy' | 'crossOriginOpenerPolicy' | 'crossOriginResourcePolicy' | 'originAgentCluster' | 'referrerPolicy' | 'strictTransportSecurity' | 'xContentTypeOptions' | 'xDNSPrefetchControl' | 'xDownloadOptions' | 'xFrameOptions' | 'xPermittedCrossDomainPolicies' | 'xXSSProtection' | 'permissionsPolicy';
type HeaderName = 'Content-Security-Policy' | 'Cross-Origin-Embedder-Policy' | 'Cross-Origin-Opener-Policy' | 'Cross-Origin-Resource-Policy' | 'Origin-Agent-Cluster' | 'Referrer-Policy' | 'Strict-Transport-Security' | 'X-Content-Type-Options' | 'X-DNS-Prefetch-Control' | 'X-Download-Options' | 'X-Frame-Options' | 'X-Permitted-Cross-Domain-Policies' | 'X-XSS-Protection' | 'Permissions-Policy';
interface SecurityHeaders {
    crossOriginResourcePolicy?: CrossOriginResourcePolicyValue | false;
    crossOriginOpenerPolicy?: CrossOriginOpenerPolicyValue | false;
    crossOriginEmbedderPolicy?: CrossOriginEmbedderPolicyValue | false;
    contentSecurityPolicy?: ContentSecurityPolicyValue | false;
    originAgentCluster?: '?1' | false;
    referrerPolicy?: ReferrerPolicyValue | false;
    strictTransportSecurity?: StrictTransportSecurityValue | false;
    xContentTypeOptions?: XContentTypeOptionsValue | false;
    xDNSPrefetchControl?: XDnsPrefetchControlValue | false;
    xDownloadOptions?: XDownloadOptionsValue | false;
    xFrameOptions?: XFrameOptionsValue | false;
    xPermittedCrossDomainPolicies?: XPermittedCrossDomainPoliciesValue | false;
    xXSSProtection?: string | false;
    permissionsPolicy?: PermissionsPolicyValue | false;
}
declare module 'h3' {
    interface H3EventContext {
        security: {
            headers: SecurityHeaders;
        };
    }
}

type RequestSizeLimiter = {
    maxRequestSizeInBytes: number;
    maxUploadFileRequestInBytes: number;
    throwError?: boolean;
};
type RateLimiter = {
    tokensPerInterval: number;
    interval: string | number;
    driver?: {
        name: string;
        options?: Record<string, any>;
    };
    headers?: boolean;
    throwError?: boolean;
};
type XssValidator = {
    /** Array of methods for which the validator will be invoked.
    @default ['GET', 'POST']
    */
    methods?: Array<HTTPMethod>;
    whiteList?: Record<string, any>;
    escapeHtml?: boolean;
    stripIgnoreTag?: boolean;
    stripIgnoreTagBody?: boolean;
    css?: Record<string, any> | boolean;
    throwError?: boolean;
};
type BasicAuth = {
    exclude?: string[];
    include?: string[];
    name: string;
    pass: string;
    enabled?: boolean;
    message: string;
};
type HTTPMethod = 'GET' | 'POST' | 'DELETE' | 'PATCH' | 'PUT' | 'TRACE' | 'OPTIONS' | 'CONNECT' | 'HEAD';
type CorsOptions = {
    origin?: '*' | 'null' | string | (string | RegExp)[] | ((origin: string) => boolean);
    methods?: '*' | HTTPMethod[];
    allowHeaders?: '*' | string[];
    exposeHeaders?: '*' | string[];
    credentials?: boolean;
    maxAge?: string | false;
    preflight?: {
        statusCode?: number;
    };
};
type AllowedHTTPMethods = {
    methods: HTTPMethod[] | '*';
    throwError?: boolean;
};

type Ssg = {
    meta?: boolean;
    hashScripts?: boolean;
    hashStyles?: boolean;
};
interface ModuleOptions {
    headers: SecurityHeaders | false;
    requestSizeLimiter: RequestSizeLimiter | false;
    rateLimiter: RateLimiter | false;
    xssValidator: XssValidator | false;
    corsHandler: CorsOptions | false;
    allowedMethodsRestricter: AllowedHTTPMethods | false;
    hidePoweredBy: boolean;
    basicAuth: BasicAuth | false;
    enabled: boolean;
    csrf: ModuleOptions$1 | boolean;
    nonce: boolean;
    removeLoggers: Options | false;
    ssg: Ssg | false;
    /**
     * enable runtime nitro hooks to configure some options at runtime
     * Current configuration editable at runtime: headers
     */
    runtimeHooks: boolean;
    sri: boolean;
}
type NuxtSecurityRouteRules = Pick<ModuleOptions, 'headers' | 'requestSizeLimiter' | 'rateLimiter' | 'xssValidator' | 'corsHandler' | 'allowedMethodsRestricter' | 'nonce' | 'sri' | 'ssg'>;
declare module 'nitropack' {
    interface NitroRuntimeHooks {
        'nuxt-security:headers': (config: {
            /**
             * The route for which the headers are being configured
             */
            route: string;
            /**
             * The headers configuration for the route
             */
            headers: SecurityHeaders;
        }) => void;
        'nuxt-security:ready': () => void;
    }
}

declare module 'nuxt/schema' {
    interface NuxtOptions {
        security: ModuleOptions;
    }
    interface RuntimeConfig {
        security: ModuleOptions;
        private: {
            basicAuth: BasicAuth | false;
            [key: string]: any;
        };
    }
}
declare module 'nitropack' {
    interface NitroRouteConfig {
        security?: Partial<NuxtSecurityRouteRules>;
    }
}

declare const _default: _nuxt_schema.NuxtModule<ModuleOptions>;

export { type AllowedHTTPMethods, type BasicAuth, type CSPSandboxValue, type CSPSourceValue, type ContentSecurityPolicyValue, type CorsOptions, type CrossOriginEmbedderPolicyValue, type CrossOriginOpenerPolicyValue, type CrossOriginResourcePolicyValue, type HTTPMethod, type HeaderName, type ModuleOptions, type NuxtSecurityRouteRules, type OptionKey, type PermissionsPolicyValue, type RateLimiter, type ReferrerPolicyValue, type RequestSizeLimiter, type SecurityHeaders, type Ssg, type StrictTransportSecurityValue, type XContentTypeOptionsValue, type XDnsPrefetchControlValue, type XDownloadOptionsValue, type XFrameOptionsValue, type XPermittedCrossDomainPoliciesValue, type XssValidator, _default as default };
