import { defineNitroPlugin, getRouteRules, setResponseHeader } from "#imports";
import { headerStringFromObject } from "../../utils/headers.mjs";
import { isPrerendering } from "../utils/index.mjs";
export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook("render:html", (html, { event }) => {
    if (isPrerendering(event)) {
      return;
    }
    const { security } = getRouteRules(event);
    if (!security?.headers || !security.headers.contentSecurityPolicy) {
      return;
    }
    let nonce;
    if (security.nonce) {
      nonce = event.context.nonce;
      const sections = ["body", "bodyAppend", "bodyPrepend", "head"];
      const cheerios = event.context.cheerios;
      for (const section of sections) {
        cheerios[section].forEach(($) => {
          $("link").attr("nonce", nonce);
          $("script").attr("nonce", nonce);
          $("style").attr("nonce", nonce);
        });
      }
    }
    const csp = security.headers.contentSecurityPolicy;
    const headerValue = generateCspRules(csp, nonce);
    setResponseHeader(event, "Content-Security-Policy", headerValue);
  });
  function generateCspRules(csp, nonce) {
    const generatedCsp = Object.fromEntries(Object.entries(csp).map(([key, value]) => {
      if (typeof value === "boolean") {
        return [key, value];
      }
      const sources = typeof value === "string" ? value.split(" ").map((token) => token.trim()).filter((token) => token) : value;
      const modifiedSources = sources.filter((source) => !source.startsWith("'nonce-") || source === "'nonce-{{nonce}}'").map((source) => {
        if (source === "'nonce-{{nonce}}'") {
          return nonce ? `'nonce-${nonce}'` : "";
        } else {
          return source;
        }
      }).filter((source) => source);
      const directive = key;
      return [directive, modifiedSources];
    }));
    return headerStringFromObject("contentSecurityPolicy", generatedCsp);
  }
});
